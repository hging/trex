#!/usr/bin/env ruby
require File.expand_path(File.join(File.dirname(__FILE__),'..','lib/gdx'))

Order = Struct.new :coin, :size, :rate, :cash_out_pct, :stop_pct, :stop, :cash_out, :id, :sell_id, :complete, :max_loss, :max_gain, :cost do 
  def self.init coin: nil, size: nil, rate: nil, cash_out_pct: 0.1, stop_pct: 0.1
    ins = new coin, size, rate, cash_out_pct, stop_pct
    
    ins.stop     = rate*(1.0-stop_pct)
    ins.cash_out = rate*(1.0+cash_out_pct)
    
    ins.max_loss = size*(ins.rate - ins.stop)
    ins.max_gain = size*(ins.cash_out - ins.rate)    
    
    ins.cost = size*rate
    
    ins
  end
  
  def stop? r
    (r / rate) <= stop_pct
  end
  
  def execute client
    o       = client.usd! coin, size, rate
    self.id = o.id
    o
  end
  
  def filled? client
    o = client.order id
    o.done_reason == "filled"
  end
  
  def flip! client
    o = client.usd? coin, size, cash_out
    
    self.sell_id = o.id
  end
  
  def completed? client
    return self.complete if self.complete
    
    o = client.order sell_id
    self.complete! if o.done_reason == "filled"
  end
  
  def complete!
    self.complete = true
  end
  
  def self.from_hash h
    ins = new
    
    h.keys.each do |k|
      ins[k.to_sym] = h[k]
    end
    
    ins
  end
  
  def to_json o
    to_h.to_json
  end
end


def prep coin, base, start
  base

  incr = 0.25
  size = 0.1

  orders = []
  rate  = start

  i= -1

  while t > 0
    a=(size*(start/rate))*(1 + ((i+=1)*0.025))
    b=rate
  
    if (a*b) < 10
      a = 10 / rate
    end
  
    co   = 0.1*(1+(i*0.015))
    stop = 0.1*(1+(i*0.01))
  
    orders << Order.init(size: a, rate: b, coin: coin, cash_out_pct: co, stop_pct: stop)
 
    t    -= a*b
    rate -= incr
  end
  
  orders
end

def log orders
  r=nil
  File.open("orders.json", "w") do |f|
    f.puts r=orders.to_json
  end
  
  r
end

def client
  $client ||= GDX::Client.new
end

def execute orders
  c=0
  orders.map do |o|
    oo = o.execute client
    c+=1
    
    if c >= 5
      sleep 1
      c = 0
    end
    
    oo
  end
end

def results orders
  g = l = 0
  
  orders.each do |o|
    g += o.max_gain
    l += o.max_loss
  end
  
  {
    loss: l,
    gain: g
  }
end

def import
  orders = JSON.parse(open("orders.json").read).map do |o| Order.from_hash o end
end

require 'pry'

Pry.start
