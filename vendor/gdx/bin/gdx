#!/usr/bin/env ruby
require File.expand_path(File.join(File.dirname(__FILE__),'..','lib/gdx'))


class Beeper
  def beep
    return if @t
    #Thread.new do
      @t ||= Thread.new do
        #`aplay ~/*/*.wav`
        print "\a"
      end
      
      @t.join
      
      @t = nil
    #end
  end
end

Thread.abort_on_exception = true

class Market
  attr_reader :client, :bid, :ask, :last, :coin, :base, :socket
  def initialize client, coin, base
    @client = client
    @coin, @base = coin, base 
    
    @socket = client.stream market do |t|
      init t
    end
    
    # @socket.match do |m|
        #
    # end
    
    @socket.done do |m|
      filled m.order_id
    end
  end
  
  def init t
    @last, @ask, @bid = t.last.to_f, t.ask.to_f, t.bid.to_f
  end
  
  def market
    @market ||= "#{coin}-#{base}"
  end
  
  def sell amt, rate, &b
    @sell_cb = b
    @sell_order = client.account.sell market, amt, rate 
    
    check_fill @sell_order
  end

  def buy amt, rate, &b
    @buy_cb = b
    @buy_order = client.account.buy market, amt, rate 
    
    check_fill @buy_order
  end
  
  def check_fill o
    Thread.new do
      sleep 1  
      if !client.orders.find do |oo|
        oo.id == o.id
      end
        filled o.id
      end
    end
  end
  
  def filled id
    if @buy_order and @buy_order.id == id
      @buy_cb.call
    elsif @sell_order and @sell_order.id == id
      @sell_cb.call
    end
  end
end

class Intra
  attr_reader :beeper, :client
  attr_accessor :coin_usd, :coin_btc, :btc
  def initialize
    @beeper = Beeper.new
  
    @client = GDX::Client.new
    
    @coin_usd = Market.new client, :LTC, :USD
    @coin_btc = Market.new client, :LTC, :BTC
    @btc      = Market.new client, :BTC, :USD
  
    Thread.new do
      loop do
        next unless coin_usd.last and btc.last and coin_btc.last
        
        if (a=profit_usd) > 0.15
          # sell_usd
        end
        
        print "\r#{"%.3f" % z=coin_usd.last} #{"%.3f" % @btc2usd} ^^ #{"%.5f" % coin_btc.last} ^^ #{"%.3f" % btc.last} #{"%.2f" % a} -- #{z-(z*0.997*0.997*0.997)}".ljust(75)
      end
    end
  end
  
  def profit_usd
    @sell = coin_usd.ask
    @sell - btc2usd(@buy = coin_btc.bid)
  end
  
  def btc2usd(ask=nil)
    @btc2usd = ask * btc.bid if ask
    @btc2usd
  end
  
  def beep
    @beeper.beep
  end
  
  def sell_usd
    return if @hold
  
    @hold = true
  
    p [:EXECUTE, @sell, @btc2usd]
    
    btc.buy @buy, @btc.bid do
      sleep 0.5
      coin_btc.buy 1, @buy do
        sleep 0.5
        coin_usd.sell 1, @sell do
          @hold = false
        end
      end
    end
  end

  def sell_btc
    return if @hold
  
    @hold = true
  
    p [:EXECUTE, @sell, @buy]
    
    coin_usd.buy 1, @sell do
      sleep 0.2
      coin_btc.sell 1, @buy do
        sleep 0.2
        btc.sell @buy, btc.ask do
          @hold = false
        end
      end
    end
  end
end

intra = Intra.new

t = 2100/3.0
buys = [
  [169.68, a=t/10],
  [169.22, a],
  [169.11, a],
  [168.44, a],
  [168.23, a],
  [167.08, a],
  [167.84, a],
  [165.66, a],
  [164.48, a],
  [161.21, a]
]

c=GDX::Client.new
oo = buys.map do |s|
  r = s[0]
  a = s[1] / r
  o = c.usd! :LTC, a,r
end

p oo

c = 42
while true; 
#print `clear`
#puts "\e[#{c}m"
#13.times do
#puts (" "*70)
#puts "\n"
end
#puts "\e[0m"
#sleep 1;
#c+=1
#c=42 if c > 47
#end
