#!/usr/bin/env ruby

require 'trex'
require 'grio/dsl'

raise unless account=Trex.env[:account]

def result &b
  obj = b.call
  puts JSON.pretty_generate({result: obj})
  exit
rescue => e
  puts ({err: e.to_s}.to_json)
  exit
end

def order account, type, market, amt, rate
  uuid = account.send type, market, amt, rate
  uuid
end

if ARGV.index("--open")
  result do
    account.orders
  end
end

if ARGV.index("--btc")
  ARGV << "--balance=btc"
end

ARGV.find do |a| break if a=~/\-\-balance\=(.*)/ end
if coin = $1
  result do
    bal = account.balance(n=coin.upcase.to_sym)
    { 
      name:    n,
      avail:   bal.avail,
      total:   bal.amount,
      pending: bal.pending,
      address: bal.address,
    }
  end
end


ARGV.find do |a| break if a=~/\-\-cancel\=(.*)/ end
if uuid = $1
  if uuid == "all"
    result do
      account.orders.each do |o|
        o.cancel
      end
      
      true
    end
  end
  
  result do
    account.cancel uuid
    true
  end
end

ARGV.find do |a| break if a=~/\-\-status\=(.*)/ end
if uuid = $1
  result do
    Trex::Order.get(account, uuid)
  end
end


ARGV.find do |a| break if a=~/\-\-market\=(.*)/ end
if market = $1
  base,coin = account.balance(market.split("-")[0]), account.balance(market.split("-")[1])
  
  ARGV.find do |a| break if a=~/\-\-rate\=(.*)/ end
  rate = $1
  
  ARGV.find do |a| break if a=~/\-\-amount\=(.*)/ end
  amt = $1  
  
  raise unless rate
  raise unless amt
  

  
  if ["last","ask","bid"].index(rate)
    tick = Trex.ticker market
    rate = tick.send(rate.to_sym)
  elsif rate == "diff"
    tick = Trex.ticker market
    rate = (tick.ask + tick.bid) / 2
  else
    rate = rate.to_f
  end  

  if ARGV.index "--sell"
    if amt == "all" or amt == "-1"
      amt = coin.avail
    elsif amt =~ /\-([0-9]+)\.([0-9]+)/
      amt = coin.avail * ("#{$1}.#{$2}").to_f
    else
      amt=amt.to_f
    end
  
    result do
      order(account, :sell, market, amt, rate)
    end
  elsif ARGV.index "--buy"
    if amt == "all" or amt == "-1"
      amt = base.avail
    elsif amt =~ /\%([0-9]+)/
      amt = base.avail * (($1).to_f / 100)
    else
      amt=amt.to_f
    end
  
    result() do
      order(account, :buy, market, amt, rate)
    end
  end
end
