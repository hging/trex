#!/usr/bin/env ruby

require 'trex'

class << self
  def balances
    balances = {}
    
    [:USDT, :BTC,:ETH, ARGV[-1].upcase.to_sym].each do |c|
      balances[c] = Trex.env[:account].balance(c)
    end
    
    balances
  end
end

$start = balances

sleep 3

def result &b
  obj = b.call
  puts JSON.pretty_generate({result: obj})
  exit
rescue => e
  puts ({err: e.to_s}.to_json)
  exit
end

def order cmd, time=false
  j = JSON.parse(`#{cmd}`)
  
  raise j['err'] if j['err']

  puts "Order UUID: #{uuid=j['result']['uuid']}"

  order = nil

  c=0
  while !order or !order.closed?
    order = Trex::Order.get(Trex.env[:account], uuid)
    break if order.closed?
    if !time and c >= 2
      order.cancel
      return false
    end
    sleep 0.3
    print "\r..."
    sleep 0.3
    print "\rOrder open"
    c+=1 if !time
  end

  true
end

def buy m, r
  cmd = "./bin/order --account-file=#{Trex.env[:account_file]} --market=#{m} --buy --amount=all --rate=#{r}"
  order cmd
end

def sell m, r
  cmd = "./bin/order --account-file=#{Trex.env[:account_file]} --market=#{m} --sell --amount=all --rate=#{r}"
  
  order cmd, true
end

def intratrage coin
  j = JSON.parse(`./bin/market -i --market=btc-#{coin}`)
  if !j['err']
    result do
      target = 1.01
    
      l  = nil
      h  = nil
      go = false
      
      $pct = 1.0
      
      t=Thread.new do
        loop do
          STDERR.print "\rwaiting for target rates: #{$pct}"
          sleep 0.5
          STDERR.print "..."
          sleep 0.5
        end
      end
      
      while !go
        l = j['result']['low']
        h = j['result']['high']
      
        go = ($pct=j['result']['pct']) >= target
        break if go
        sleep 3
        
        j = JSON.parse(`./bin/market -i --market=btc-#{coin}`)
        raise j['err'] if j['err']
      end
      
      t.kill
      
      STDERR.puts "\nExecute - Percent: #{$pct}"
      
      if ARGV.index("-b") or !ARGV.index("-s")
        raise "Too Long to buy." unless buy(l['market'], br=l['rate'])
        sell(h['market'], sr=((h['rate']/$pct)*target))
      else
        sell h['market'], br=h['rate']
        buy  l['market'], sr=l['rate']
      end
      
      sleep 3
      
      e = balances
     
      sleep 1
     
      scoin=l['market'].split("-")[0].upcase.to_sym
      sa = $start[scoin].avail
      ea = e[coin=h['market'].split("-")[0].upcase.to_sym].avail - $start[coin].avail
      
      if scoin != :USDT
        sa = j['result']['high']['usd'] * sa
      end      
      
      {
        start: sa,
        end:   ea=sa*target*0.9975,
        gain:  ea-sa
      }
    end
  end
end

intratrage ARGV.last.upcase
